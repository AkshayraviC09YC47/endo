const callself = require('callself')
const interops = require('interops')
const moduleinterops = require('./moduleinterops')

// generated by running this file with console.error(stableOrderJson(interops))
const whatWouldNodejsRequireDo = '{"default":{"nameCollision":1},"nameCollision":3,"notDefault":2}'
// Would we rather reproduce the import behavior? see _generateExpected.mjs
// const whatWouldNodejsImportDo = '{"default":{"default":{"nameCollision":1},"nameCollision":3,"notDefault":2},"nameCollision":3,"notDefault":2}'



function assertInteropNameCollisions({ moduleReference, expect, name }) {
  const whatWeGot = stableOrderJson(moduleReference)
  if (whatWeGot !== expect) {
    throw Error(`Exporting a field called 'default' from a cjs module '${name}' should not override all other fields.
    What we got     : ${whatWeGot}
    What we expected: ${expect}`)
  }
}

function stableOrderJson(obj) {
  return JSON.stringify(obj, Object.keys(obj).sort());
}


module.exports.assertions = {
  packageWithDefaultField() {
    assertInteropNameCollisions({
      name: 'interops',
      moduleReference: interops,
      expect: whatWouldNodejsRequireDo,
    })
  },
  moduleWithDefaultField() {
    assertInteropNameCollisions({
      name: 'moduleinterops',
      moduleReference: moduleinterops,
      expect: whatWouldNodejsRequireDo,
    })
  },
  packageReferencingItself() {
    try {
      callself.makeTheCall()
    } catch (e) {
      throw Error('Referencing exported functions should be possible', { cause: e });
    }
  }
}
